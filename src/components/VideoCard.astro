---
import Card from "./card.astro";

interface Props {
  backgroundColor?: string;
  videoSrc?: string;
  title: string;
  description: string;
  tags: string[];
  videoHeight?: number;
}

const {
  backgroundColor,
  videoSrc,
  title,
  description,
  tags,
  videoHeight = 500,
} = Astro.props;

// Generate multiple video sources from base path
function getVideoSources(basePath: string) {
  const pathWithoutExt = basePath.replace(/\.[^/.]+$/, "");
  return [
    {
      src: `${pathWithoutExt}.av1.webm`,
      type: 'video/webm; codecs="av01.0.08M.08"',
    },
    {
      src: `${pathWithoutExt}.h264.mp4`,
      type: 'video/mp4; codecs="avc1.640029"',
    },
  ];
}

// Generate poster path from base path
function getPosterPath(basePath: string) {
  const pathWithoutExt = basePath.replace(/\.[^/.]+$/, "");
  return `${pathWithoutExt}.poster.jpg`;
}

const videoSources = videoSrc ? getVideoSources(videoSrc) : null;
const posterPath = videoSrc ? getPosterPath(videoSrc) : null;
---

<style define:vars={{ videoHeight }}>
  .video-container {
    width: 100%;
    height: calc(var(--videoHeight) * 1px);
  }

  .video {
    width: 100%;
    height: 100%;
    object-fit: contain;
    will-change: transform;
    transform: scale(1);

    border-top-left-radius: 24px;
    border-top-right-radius: 24px;
  }

  .content {
    display: flex;
    flex-direction: column;
    padding-left: 14px;
    padding-right: 14px;
    padding-bottom: 16px;
    gap: 18px;
    margin-top: 18px;
  }

  .title {
    font-size: 18px;
    font-weight: bold;
    color: white;
    background-color: black;

    height: 32px;
    padding-left: 20px;
    padding-right: 20px;
    border-radius: 12px;
    align-self: center;
  }

  .description {
    font-size: 17px;
    letter-spacing: -3%;
    font-weight: 500;
    white-space: pre-wrap;
  }

  .description em {
    font-style: italic;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
  }

  .tag {
    background-color: black;
    color: white;

    height: 24px;
    padding-left: 14px;
    padding-right: 14px;
    border-radius: 12px;

    display: flex;
    flex-direction: column;
    justify-content: center;

    font-size: 14px;
    font-weight: 600;
    letter-spacing: -3%;
    text-align: center;
  }
</style>

<script>
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const video = entry.target as HTMLVideoElement;
        video.preload = "metadata";
        observer.unobserve(video);
      }
    });
  });

  document.querySelectorAll(".video").forEach((video) => {
    observer.observe(video);
  });
</script>

<Card backgroundColor={backgroundColor}>
  {
    videoSources && (
      <div class="video-container">
        <video
          class="video"
          controls
          preload="none"
          muted
          playsinline
          poster={posterPath}
        >
          {videoSources.map((source) => (
            <source src={source.src} type={source.type} />
          ))}
          Your browser does not support the video tag.
        </video>
      </div>
    )
  }

  <div class="content">
    <div class="title">
      <h3>{title}</h3>
    </div>

    <p class="description" set:html={description} />

    <div class="tags">
      {tags.map((tag) => <span class="tag">{tag}</span>)}
    </div>
  </div>
</Card>
